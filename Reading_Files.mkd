
# Introduction to reading files with Python

Python can use various types of data sources for analysis. One of the most common sources for data storage is through files such as 
spreadsheets, csv , text files e.t.c. In order to manipulate the data on files, the python program first has to open, write, and read
these files.

In Python, the open function (open()) creates a file object. The read function (read()) saves the content of the file as a string.
The file path names can also be specified in the open function.. For example, open('C:\\sers\\BWayne\\tax_return.txt'). 
### code 
    myjournal = open ('journal.txt')
    contents = myjournal.read()
    print(contents)
    
In Python, the readlines() method returns a list of strings, where the first element is the contents of the first line. You can also use the file.readline() method which returns a single line at a time, which is useful when dealing with large files where the entire file contents may not fit into the available system memory. 

 To close a file, you can use the close() function.
### code
    f = open('myfile.txt') 
    contents = f.read()  
    f.close() 

 *Example 1: Calculating the average of data per line*
### code
     f = open('mydata.txt')
    lines = f.readlines()
     f.close()

    total = 0    # Iterate over each line
    for ln in lines:
        total += int(ln)

    avg = total/len(lines)   # Compute result
    print('Average value:', avg)
    
 OR 
 
 You can iterate over each line in the file, by simply doing:
 ### code
     f = open('myfile.txt')
     for line in f:
         print(line)

    f.close()
    
### WRITING FILES
In Python, you can write a file in order to store data permanently.To do this, the file.write() method writes a string argument to a file. The write() method accepts a string argument only. Integers and floating-point values must first be converted using str(). 

### code
    f = open('myfile.txt', 'w')  # Open file
    f.write('Example string:\n  test...')  # Write string
    f.close()  # Close the file

To convert numeric values into a string in order to write file:
### code
    num1 = 5
    num2 = 7.5
    num3 = num1 + num2

    f = open('myfile.txt', 'w')
    f.write(str(num1))
    f.write(' + ')
    f.write(str(num2))
    f.write(' = ')
    f.write(str(num3))
    f.close()
#### Writing modes
When writing to a file, the mode of the file must be explicitly set in the open() function call. A mode indicates how a file is opened.
The mode of writing is specified in open() function, as the second arguement ex). open('myfile.txt', 'w')
If no mode is specified, the default mode is 'r'.

| MODE   | DESCRIPTION |
| ------------- | ------------- |
| a  |Open the file for appending. If file does not exist then the file is created. Writes are added to end of existing file contents. |
| w  |Open the file for writing. If file does not exist then the file is created. Contents of an existing file are overwritten.|
| r  | Open the file for reading. You are not allowed to write, overwrite file, or create missing file.|

## OS Module
In Python, the OS module provides a way of using operating system dependent functionality. The functions that the OS module provides allows you to interface with the underlying operating system that Python is running on – be that Windows, Mac or Linux. 

EXAMPLE
### code
    import os
    myfile = open('myfile.txt', 'r')
    file_info = os.stat('myfile.txt')  #The os module contains functions to utilize the file system. os.stat() queries file information.

    os.remove('myfile.txt')

One of the most useful functions is os.path.join(), which concatenates the arguments using the correct path separator for the current operating system. Instead of writing the literal path = "subdir\\bat_mobile.jpg", a programmer should write path = os.path.join('subdir', 'bat_mobile.jpg'), which will result in "subdir\\bat_mobile.jpg" on Windows, and "subdir/bat_mobile.jpg" on Linux/Mac. 

EXAMPLE - Using os.path.join() to create a portable file path string.
### code
    import os
    import datetime

    curr_day = datetime.date(1997, 8, 29)
    num_days = 30
    for i in range(num_days):
        year = str(curr_day.year)
        month = str(curr_day.month)
        day = str(curr_day.day)

        file_path = os.path.join('logs', year, month, day, 'log.txt')  # Build path string using current OS path separator
        f = open(file_path, 'r')
        print('%s: %s' % (file_path, f.read()))
        f.close()

        curr_day = curr_day + datetime.timedelta(days=1)
        
  OTHER USEFUL OS FUNCTIONS: 
  1. os.path.split(path) – Splits a path into a 2-tuple (head, tail), where tail is the last token in the path string and head is everything else. 
  ### CODE
      import os
      p = os.path.join('C:\\', 'Users', 'BWayne', 'batsuit.jpg')
      print(os.path.split(p))
  2.os.path.exists(path) – Returns True if path exists, else returns False.
  ### CODE
      import os
      p = os.path.join('C:\\', 'Users', 'BWayne', 'batsuit.jpg')
      if os.path.exists(p):
          print('Suit up...')
      else:
          print('The Lamborghini then?')
  3.os.path.isfile(path) – Returns True if path is an existing file, and false otherwise (e.g., path is a directory). 
  ### CODE
      import os
      p = os.path.join('C:\\', 'Users', 'BWayne', 'bat_chopper')
      if os.path.isfile(p):
          print('Found a file...')
      else:
          print('Not a file...')
  4.os.path.getsize(path) – Returns the size in bytes of path.
  ### CODE
      import os
      p = os.path.join('C:\\', 'Users', 'BWayne', 'batsuit.jpg')
      print('Size of file:', os.path.getsize(p), 'bytes')
