Introduction to Loops
=====================

This chapter is an introduction to loops. Loops are used to run codes in a continous cyle as long as the condition is true.

## FOR LOOPS 
For Loops are used when you want to run a loop for a specific duration. A for loop statement loops over each element in a container one at a time, assigning the next element to a variable that can then be used in the loop body.

*Exercise 5.11: Print each individual element in the list*

Example 1 -
### code 

    d =["banana", "apple", "microsoft"]
    for element in d:
        print (element)
Example 2 -
### code
    a = [3,10,-1]
    for element in a:
        print (element)
        print (element)
Example 3 - Printing out list from dictionaries
### code
    channels = {
        'MTV': 35,
        'CNN': 28,
        'FOX': 11,
        'NBC': 4,
        'CBS': 12
    }

    for c in channels:
        print('%s is on channel %d' % (c, channels[c]))
OUTPUT:
- MTV is on channel 35
- CNN is on channel 28
- FOX is on channel 11
- NBC is on channel 4
- CBS is on channel 12

Example 4 - Use a for loop to access each character of a string.
### code
    my_str = ''
    for character in "Take me to the moon.":
        my_str += character + '_'
    print(my_str)

*Exercise 5.12: Find the sum of a list*
Example 1
### code
    b = [3,10,-1]
    total = 0
    for element in b:
        total = total + element
    print (total)

* Exercise 5.13: *
Example 1 -Example to find range of numbers
### code
    range(1,5) #find the range of numbers from 1 to 5 not including 5
    print (range(1,5))
    c = list (range(1,5)) #to convert to a list
    print (c)
Example 2 : Find  total of range of numbers
### code
    total1= 0
    for element in range(1,5):
        total1= total1 + element # shortcut is total1 += element
    print(total1)

Example 3: Find total of number within 1-8 and add only if number is divisible by 3
### code
    print(list(range(1,8)))
    total2 = 0
    for element in range(1,8):
        if element % 3 == 0:
            total2= total2+ element  #module operator to get remainder of division use %
    print(total2)
Example 4 - Can you compute all multiples of 3,5 that are less than 100?
### code
    total3 =0
    for element in range(1,100):
        if element % 3 == 0:
            total3= total3 + element
        elif element % 5 == 0:
            total3= total3 + element
    print(total3)
ANOTHER WAY TO DO IT IS: 
### code
    total1 = 0
    for i in range(1,100):
        if i % 3 == 0:
            total1 += i
    print(total1)

    total2 = 0
    for i in range(1,100):
        if i % 5 == 0:
            total2 += i
    print(total2)

    totalToSub = 1683
    for i in range(1,100):
        if i % (3 * 5) == 0:
            totalToSub += i
    print(totalToSub)

*Exercise 5.14: Looping over a sequence in reverse.*
Example 1- print names in normal and then reverse order.
### code
    names = [
        'Biffle',
        'Bowyer', 
        'Busch',
        'Gordon',
        'Patrick'
    ]
    for name in names:
        print(name, '|', end=' ')
    print('\nPrinting in reverse:')
    for name in reversed(names):
        print(name, '|', end=' ')
        
*5.15 Counting using the range() function.*

1. range(5)	= 0 1 2 3 4                    #Every integer from 0 to 4.
2. range(0, 5) = 0 1 2 3 4                 #Every integer from 0 to 4.
3. range(3, 7) = 3 4 5 6                   #Every integer from 3 to 6.
4. range(10, 13) = 10 11 12                #Every integer from 10 to 12.
5. range(0, 5, 1) = 0 1 2 3 4              #Every 1 integers from 0 to 4.
6. range(0, 5, 2) = 0 2 4                  #Every 2 integers from 0 to 4.
7. range(5, 0, -1) = 5 4 3 2 1             #Every 1 integers from 5 down to 1.
8. range(5, 0, -2) = 5 3 1                 #Every 2 integers from 5 down to 1.


## WHILE LOOPS
While loops use when you don't know how many loops you need beforehand. If the loop expression is True, then the indented code block is executed and the loops goes back to the beggining while loop statement. Then, the loop is executed again if the while loop statement remains true. If the statement is false, the  then execution instead proceeds to below the loop body.

*Exercise 5. - Find total of (1 to 4).*

Example 1 -
### code
    total6= 0
    j = 1
    while j < 5:
        total6 += j
    print(total6)
 *Exercise 5. - Find sum of only the postive number of the given list of numbers. *
 
 Example 1 - 
 ### code
    given_list = [5,4,4,3,1,-2,-3,-5]  #You only know that the numbers are sorted in a decending order.
    total7 = 0
    i = 0
    while given_list[i] > 0:
        total7 += given_list[i]
        i += 1
    print(total7)
Example 2 - You don't have a negative number so the loop will be infinite. Therefore you need to add another condition.
### code 
    given_list1 = [5,4,4,3,1]
    total8= 0
    i=0
    while i < len(given_list1) and given_list1[i] > 0:
        total8+= given_list1[i]
        i += 1
    print(total8)
    
*Exercise 5. - Draw a face using symbols*

Example 1 -
### code
    nose = '0'  # Looks a little like a nose
    user_value = '-'

    while user_value != 'q':
        print(' %s %s ' % (user_value, user_value))  # Print eyes
        print('  %s  ' % nose)  # Print nose
        print(user_value*5)  # Print mouth
        print('\n')

        # Get new character for eyes and mouth
        user_input = input("Enter a character ('q' for quit): ")
        user_value = user_input[0]

    print('Goodbye.\n')
    
### COUNTING WITH LOOPS
In order to count with loops, you can use a variable to count the number of iterations, called a loop variable. For example, to iterate 10 times using an integer loop variable i:
            use i = 0
            while i <=10:
                i = i + 1
                
*Exercise 5. - Write a program that prints the U.S. presidential election years from 1792 to present day, knowing that such elections occur every 4 years.*

Example 1 -
### code
    year = 1792
    current_year = 2018
    while year <= current_year:
        year = year + 4
        print(year)
### USING BREAK AND CONTINUE IN LOOPS
*Exerise 5. - *

Example 1 -Use break statement in while loops.
### code
    given_list3 = [5,4,4,3,1,-2,-3,-5]
    total9 = 0
    i = 0
    while True:
        total9 += given_list3[i]
        i += 1
        if given_list3[i] <= 0:
            break
    print(total9)

Example 2 - Use a break statement to add only positive numbers.
### code
    given_list2 = [5,4,4,3,1,-2,-3,-5]
    total4 = 0
    for element in given_list2:
        if element <= 0:
            break
        total4 += element
    print(total4)



#exercise for while loops: calculate sum of negative numbers

given_list4= [7,5,4,4,3,1,-2,-3,-5,-7]
total10= 0
for element in given_list4:
    if element >= 0:
        print('null')
    elif element <=0:
        total10 += element
print(total10)

# using while loop:

given_list = [7, 5, 4, 4, 3, 1, -2, -3, -5, -7]
total = 0
i = 0

while i < len(given_list):
    if given_list[i] <= 0:
        total += given_list[i]
    i += 1

print (total)
#Python for Everyone

n = 5
while n > 0:
    print(n)
    n=n-1
print('Blastoff')

#breaking out of a loop: break statement ends the current
#loop and jumps to the statement immediately following the loopself.
#look at py4e on youtube
while True:
    line == input('>')

#continue stament ends the current iteration and jumps to the top
#of the loop and starts the next iteration

while True:
    line ==input('>')
    if line[0]=='#':
        continue
    if line == 'done'

#definite loop

for i in [5,4,3,2,1] :
    print(i)
print('Blastoff')

friends = ['Joseph', 'Glenn', 'Jola', 'Gift', 'Bryan']
for friend in friends:
    print('Merry Christmas:', friend)
print(friends[2],'love you')

#loop patternsm:counting in a loop: to find total or sum

zork = 0
print('Before, zork')
for thing in [9,42,56]:
    zork = zork + thing
    print(zork, thing)
print('after',zork)

#USING A BOOLEAN VALUE
found = False
print('Before', found)
for value in [9,4,42,3,74]:
    if value ==3:
        found == True
    print('found', value)
print('After',found)

#FINDING THE SMALLEST value
smallest = None #not a string but a special type
print('Before')
for value in [9,41,12,3,74,15]:
    if smallest is None:     # is stronger than ==, demands equality in type and value of variable
        smallest = value     # use is only on boolean and None type
    elif value < smallest:
        smallest = value
    print(smallest, value)
