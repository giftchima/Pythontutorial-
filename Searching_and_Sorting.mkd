## Searching and Sorting

An algorithm is a sequence of steps for accomplishing a task. 
Linear search is a search algorithm that starts from the beginning of a list, and checks each element until the search key is found.

### Linear search algorithm - Example 1:

### code
        def linear_search(numbers, key):
            for i in range(len(numbers)):
                if numbers[i] == key:
                    return i
            return -1   # not found


        numbers = [2, 4, 7, 10,10, 11, 32, 45, 87]
        print('NUMBERS:', end=' ')
        for num in numbers:
            print(str(num), end=' ')
        print()

        key = int(input('Enter a value: '))
        key_index = linear_search(numbers, key)

        if key_index == -1:
            print(str(key) + ' was not found.')
        else:
            print('Found ' + str(key) + ' at index ' + str(key_index) + '.')
#### OUTPUT:
- NUMBERS: 2 4 7 10 11 32 45 87 
- Enter a value: 10
- Found 10 at index 3.
- ...
- NUMBERS: 2 4 7 10 11 32 45 87 
- Enter a value: 17
- 17 was not found.
            
### Binary search 
Linear search may require searching all list elements, which can lead to long runtimes. Because a  list is sorted, a faster search, known as binary search, can be used. It first checks the middle object, and if the desired object comes alphabetically before the middle objecr, binary search will then search the first half and otherwise the last half.

Binary search reduces runtime or processing time by half. 

### Binary search algorithm - Example 1:

### code
      def binary_search(numbers, key):
          low = 0
          high = len(numbers) - 1

          while high >= low:
              mid = (high + low) // 2
              if numbers[mid] < key:
                  low = mid + 1
              elif numbers[mid] > key:
                  high = mid - 1
              else:
                  return mid
          return -1 # not found


      numbers = [2, 4, 7, 10, 11, 32, 45, 87]
      print('NUMBERS:', end=' ')
      for num in numbers:
          print(num, end=' ')
      print()

      key = int(input('Enter a value: '))
      key_index = binary_search(numbers, key)

      if key_index == -1:
          print(str(key) + ' was not found.')
      else:
          print('Found ' + str(key) + ' at index ' + str(key_index) + '.')
          
#### OUTPUT:
- NUMBERS: 2 4 7 10 11 32 45 87 
- Enter a value: 10
- Found 10 at index 3.
- ...
- NUMBERS: 2 4 7 10 11 32 45 87 
- Enter a value: 17
- 17 was not found.

## Sort
Sorting is the process of converting a list of elements into ascending (or descending) order.

### Selection sort algorithm
Selection sort is a sorting algorithm that treats the input as two parts, a sorted part and an unsorted part, and repeatedly selects the proper next value to move from the unsorted part to the end of the sorted part.

### Binary search algorithm - Example 1:

### code

        for i in range(len(numbers) - 1):
            # Find index of smallest remaining element
            index_smallest = i
            for j in range(i + 1, len(numbers)):
                if numbers[j] < numbers[index_smallest]:
                    index_smallest = j

            # Swap numbers[i] and numbers[index_smallest]
            temp = numbers[i]
            numbers[i] = numbers[index_smallest]
            numbers[index_smallest] = temp

The index variable i denotes the dividing point. Elements to the left of i are sorted, and elements including and to the right of i are unsorted. All elements in the unsorted part are searched to find the index of the element with the smallest value. The variable index_smallest stores the index of the smallest element in the unsorted part. Once the element with the smallest value is found, that element is swapped with the element at location i. Then, the index i is advanced one place to the right, and the process repeats

Advantage of selection sort:
1. Selection sort has the advantage of being easy to code, involving one loop nested within another loop.

### Insertion sort algorithm

Insertion sort is a sorting algorithm that treats the input as two parts, a sorted part and an unsorted part, and repeatedly inserts the next value from the unsorted part into the correct location in the sorted part.
