 # Introduction to list and Dictionaries
 
 
 ## LISTS
 A list is a container, which is an object that groups related objects together.
 A list is also a sequence that have a left to right positional ordering. Therefore, the list can be accesed through indexing.
 A list is also mutable. Therefore, it is able to be changed without the program having to replace the entire with a copy.  
 Example of a common list ---> my_list = ['hello', -4.2, 5]
 
 *How is a list created*
 1. Through using brackets [].
 2. Through using the python built-in function: list() ex. my_list = list('123') -----> print(my_list)

## Basics of lists

| Command | Description |
| --- | --- |
|list.append(x)    |Add an item to the end of list.                |               |                
|list.extend([x])  |Add all items in [x] to list.                  | git diff      |                
|list.insert(i, x) |Insert x into list before position i.	   | git status    |                
|list.remove(x)    |Remove first item from list with value x.      | git diff      |                
|list.pop()        |Remove and return last item in list.           | git status    |                
|list.pop(i)       |Remove and return item at position i in list.  | git diff      |                





 
 
 

## Modification of a list 

*Example of modification of a list
1. my_list  = [ 'h', 'e', 'l', 'l', 'o' ] = hello 
2. my_list[len(my_list):] = [ ' ', 'w', 'o', 'r', 'l', 'd', '.' ] = hello world
3. my_list[11] = '!' = hello world!
del my_list[5] = helloworld!

*Example 2
### code - In-place modification of a list
          my_teams = ['Raptors', 'Heat', 'Nets']
          your_teams = my_teams  # Create a shared reference to same list

	  my_teams[1] = 'Lakers'  # Modify list element

	  print('My teams are:', my_teams)  # Both variables have changed
	  print('Your teams are:', your_teams)  # Both variables have changed
OUTPUT: My teams are: ['Raptors', 'Lakers', 'Nets']
        Your teams are: ['Raptors', 'Lakers', 'Nets']

		
### code - In-place modification of a copy of a list
          my_teams = ['Raptors', 'Heat', 'Nets']
	  your_teams = my_teams[:]  # Assign your teams to a COPY of my_teams
	
          my_teams[1] = 'Lakers'  # Modify list element
	
	  print('My teams are:', my_teams)  # List element has changed
          print('Your teams are:', your_teams)  # List element has not changed
OUTPUT: My teams are: ['Raptors', 'Lakers', 'Nets']
        Your teams are: ['Raptors', 'Heat', 'Nets']


 
## DICTIONARIES
A dictionary is a type of container that can  contain references to objects as key-value pairs. The key is a value; in the case, the key is the word and the value is the definition. 

*How is a dictionary created*
1. Wrap braces { } around key-value pairs ex. {'Jose': 'A+', 'Gino': 'C-'} 
2. Use the built-in function dict(). ex. my_dict = dict(John='Texas State University', Adam='Minnesota State University')

### Basics of Dictionaries :common dictionary operations
|Description| Code|
| --- | --- |
|Retrieves the value associated with a key|	jose_grade = my_dict['John'] |
|Adds or  modify an  entry |	my_dict['Jackie'] = 'B+' |
|Deletes the key entry  |	del my_dict['Adam'] |
|Tests if key exist in dictionary |	if 'Jackie' in my_dict: |

### Iterating over a dictionary

- dict.items() – returns a view object that yields (key, value) tuples.
- dict.keys() – returns a view object that yields dictionary keys.
- dict.values() – returns a view object that yields dictionary values.

*Example 1 - Using dict.items() :*
### code
    num_calories = dict(Coke=90, Coke_zero=0, Pepsi=94)
    for soda, calories in num_calories.items():
        print('%s: %d' % (soda, calories))
	
OUTPUT: Coke: 90
Coke_zero: 0
Pepsi: 94

*Example 2 - Using dict.keys() :*
### code
    num_calories = dict(Coke=90, Coke_zero=0, Pepsi=94)
    for soda in num_calories.keys():
        print(soda)
OUTPUT: Coke, Coke_zero, Pepsi

*Example 3 - Using dict.values() :*
### code
    num_calories = dict(Coke=90, Coke_zero=0, Pepsi=94)
    for soda in num_calories.values():
        print(soda)
OUTPUT: 90, 0 , 94
