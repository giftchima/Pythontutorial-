# Introduction to Strings 

Strings are a sequence type, having characters ordered by position from left to right. They are immutable.
You can read individual characters of a string using brackets and indexes. ex x = 'goat, print(x[1]) ---> o

## String slicing
*Example 1:*
### code
    my_str = 'The cat in the hat'
    print(my_str[0:3])
### code
    my_str = 'The cat in the hat'
    print(my_str[3:7])
*Example 2: Use slicing to create a new object*
### code
    my_str = "The cat jumped the brown cow"
    animal = my_str[4:7]
    print('The animal is a %s' % animal)

    my_str = 'The fox jumped the brown llama'
    print('The animal is still a', animal)  # animal variable remains unchanged.
    
NOTE: my_str[:5] reads positions 0-4. Similarly, omitting end yields the characters from start to the end of the string: my_str[5:] yields all characters at and after position 5.

*Example 3: Find the first half and second half of a string.*
 ### code
    usr_text = input('Enter a string:\n')

    first_half = usr_text[:len(usr_text)//2]
    last_half = usr_text[len(usr_text)//2:]

    print('The first half of the string is "%s"' % first_half)
    print('The second half of the string is "%s"' % last_half)
### String Stride 
The stride determines how much to increment the index after reading each element. For example, my_str[0:10:2] reads every other element between 0 and 10.

### code
    numbers = '0123456789'

    print('All numbers: %s' % numbers[::])
    print('Every other number: %s' % numbers[::2])
    print('Every third number between 1 and 8: %s' % numbers[1:9:3])

OUTPUT 

All numbers: 0123456789
Every other number: 02468
Every third number between 1 and 8: 147

## Advanced string formatting

Example of conversion specifier

'%s: %f North, %f East' % ('Tokyo', 35.6, 140.8)

'%s: %d North, %d East' % ('Tokyo', 35.6, 140.8)

OUTPUT 1:'Tokyo: 35.600000 North, 140.800000 East'
OUTPUT 2: 'Tokyo: 35 North, 140 East'

 Example1: String formatting example: Add leading 0s by setting the minimum field width and 0 conversion flag.
 ### code
    student_id = int(input('Enter student ID: '))

    print('The user entered %d' % student_id)
    print('Full 8-character student ID: %08d' % student_id)
OUTPUT:
Enter student ID: 1234
The user entered 1234
Full 8-character student ID: 00001234

NOTE: The optional precision component of a conversion specifier indicates how many digits to the right of the decimal should be included
ex. '%.1f' % 1.725 indicates a precision of 1, thus the resulting string would be '1.7'
ex. '%.5f' % 1.5 results in the string '1.50000'.

*Example 1* 
### code

    import math
    real_pi = math.pi  # math library provides close approximation of pi
    approximate_pi = 22.0 / 7.0  # Approximate pi to 2 decimal places

    print('pi is %f.' % real_pi)
    print('22/7 is %f.' % approximate_pi)
    print('22/7 is accurate for 2 decimal places: %.2f' % approximate_pi)
OUTPUT:
pi is 3.141593.
22/7 is 3.142857.
22/7 is accurate for 2 decimal  places: 3.14

### STRING MAPPING: 
Using a dictionary to place values.
Example)
'time: %(hour)d:%(min)02d:%(sec)f' % {'hour':11, 'min':2, 'sec':15.002}
OUTPUT: 'time: 11:02:15.002000'

### Finding and replacing

A common task for a programmer is to edit the contents of a string. Recall that string objects are immutable -- once created, strings can not be changed. To update a string variable, a new string object must be created and bound to the variable name, replacing the old object. The replace string method provides a simple way to create a new string by replacing all occurrences of a substring with a new substring.

replace(old, new)-- Returns a copy of the string with all occurrences of the substring old replaced by the string new. The old and new arguments may be string variables or string literals.
replace(old, new, count)-- Same as above, except only replaces the first count occurrences of old.

### Methods for Finding Position of a character in a string


- find(x)-- Returns the position of the first occurrence of item x in the string, else returns -1. x may be a string variable or string literal. Recall that in a string the first position is number 0, not 1. If my_str is 'Boo Hoo!':
- my_str.find('!') # Returns 7
- my_str.find('Boo') # Returns 0
- my_str.find('oo') # Returns 1 (first occurrence only)
- find(x, start)-- Same as above but begins the search at position start:
- my_str.find('oo', 2) # Returns 5
- find(x, start, end)-- Same as above but stops the search at position end:
- my_str.find('oo', 2, 4) # Returns -1 (not found)
- rfind(x)-- Same as find but searches the string in reverse, returning the last occurrence in the string.
- count(x)-- Returns the number of times x occurs in the string.
   my_str.count('oo') # Returns 2
   
## Comparing strings
String objects may be compared using relational operators (<, <=, >, >=), equality operators (==, !=), membership operators (in, not in), and identity operators (is, is not). The following provides examples, given my_str is 'Hello', student_name is 'Kay, Jo', and teacher_name is 'Kay, Amy':

my_str == 'Hello' # Evaluates to True
my_str == 'Hello.' # Evaluates to False
student_name == teacher_name # Evaluates to False
student_name > teacher_name # Evaluates to True because 'J' > 'A' is True
student_name >= teacher_name # Evaluates to True because ">"
student_name >= 'Kay, Jo' # Evaluates to True because "=="
student_name != 'Kay, jo' # Evaluates to True because 'J' != 'j'
'Jo' in student_name # Evaluates to True
student_name in 'Jo' # Evaluates to False
student_name is 'Kay, Jo' # Evaluates to False, because 'Kay, Jo' and student name are bound to different objects.

### More string comparisons

Methods to check a string value that returns a True or False Boolean value:

- isalnum()-- Returns True if all characters in the string are lowercase or uppercase letters, or the numbers 0-9.
- isdigit()-- Returns True if all characters are the numbers 0-9.
- islower()-- Returns True if all characters are lowercase letters.
- isupper()-- Return True if all cased characters are uppercase letters.
- isspace()-- Return True if all characters are whitespace.
- startswith(x)-- Return True if the string starts with x.
- endswith(x)--Return True if the string ends with x.
- capitalize()-- Returns a copy of the string with first character capitalized and the rest lowercased.
- lower()-- Returns a copy of the string with all characters lowercased.
- upper()-- Returns a copy of the string with all characters uppercased.
- strip()-- Returns a copy of the string with leading and trailing whitespace removed.
- title()-- Returns a copy of the string as a title, with first letters of words capitalized.

## Splitting and joining strings

example 1.
### code
    url = input('Enter URL:\n')
    tokens = url.split('/')  # Uses '/' separator
    print(tokens)

### Joining
The join() method performs the inverse operation of split() by joining a list of strings together to create a single string.

ex) The statement my_str = '@'.join(['billgates', 'microsoft']) ---> 'billgates@microsoft'. 
ex2) ''.join(['http://', 'www.', 'ebay', '.com']) produces the string 'http://www.ebay.com'

### code
    phrases = ['To be, ', 'or not to be.\n', 'That is the question.']
    sentence = ''.join(phrases)
    print(sentence)
  OUTPUT
   To be, or not to be.
That is the question.

*Example 2. Splitting and joining: Replacing separators.*
### code
    path = input('Enter file name: ')

    new_separator = input('Enter new separator: ')
    tokens = path.split('/')
    print(new_separator.join(tokens)

OUTPUT:
Enter file name: C:/Users/Wolfman/Documents/report.pdf
Enter new separator: \\
C:\\Users\\Wolfman\\Documents\\report.pdf

*Example 3*
### code
    url = input('Enter Wikipedia URL: ')
    tokens = url.split('/')

    if 'wiki' !=  tokens[3]:
        tokens.insert(3, 'wiki')
        new_url = '/'.join(tokens)

        print('%s not a valid address.' % url)
        print('Redirecting to %s' % new_url)
    else:
        print('Loading %s' % url)
        
## The string format method

The string format method and % string-formatting syntax behave very similarly, each using value placeholders within a string literal. Each pair of braces {} is a placeholder known as a replacement field . A value from within the format() parentheses will be inserted into the string depending on the contents of a replacement field. 

There are three ways to fill in a replacement field:

1. Positional: An integer that describes the position of the value.
'The {1} in the {0}'.format('hat','cat') . ----> .  The cat in the hat

2.Inferred positional: Empty {} assumes ordering of replacement fields is {0}, {1}, {2}, etc.
'The {} in the {}'.format('cat', 'hat') ------> The cat in the hat

3. Named: A name matching a keyword argument
'The {animal} in the {headwear}'.format(animal='cat', headwear='hat')
